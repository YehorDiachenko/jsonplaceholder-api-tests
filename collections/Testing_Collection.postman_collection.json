{
	"info": {
		"_postman_id": "a0322937-0345-4d82-926a-8c1ca03065b1",
		"name": "Testing_Collection",
		"description": "Work is organized in workspace: JSONPlaceholder, one collection: Testing_Collection, 5 folders for five different kind of requests: GET, POST, PUT, PATCH and DELETE. One environment is part of this collection: Placeholder_Environment. All variables all separated in collection, environment and global variables. Dynamic variables, random numbers, generated from function defined in Pre-request Script in Testing_Collection. Two tests are same for all tests in all request: status code and response time. All other tests are specifically made for specific cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6562042",
		"_collection_link": "https://postman-5122.postman.co/workspace/JSONPlaceholder~bf394633-a9a0-44f8-9951-34def3dfa6df/collection/6562042-a0322937-0345-4d82-926a-8c1ca03065b1?action=share&source=collection_link&creator=6562042"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Get list of all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"usersSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Array has 10 users\", () => {\r",
									"    const users = pm.response.json();\r",
									"    pm.expect(users.length).to.equal(10);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"userSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID corresponds to user ID\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const responseId = pm.response.json().id;",
									"    pm.expect(responseId).to.equal(userId);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"todosSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 200 items\", () => {\r",
									"    pm.expect(pm.response.json().length).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/todos",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific todos by user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"todosSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Todos are returned only for the requested user ID\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const todos = pm.response.json();",
									"    ",
									"    todos.forEach(todo => {",
									"        pm.expect(todo.userId).to.equal(userId);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "userId",
								"value": "5",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{url}}/todos/?userId={{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific todo by todo ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"todoSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"TODO ID corresponds to the requested TODO ID\", () => {",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"todoId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{url}}/todos/{{todoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get album list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"albumsSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Albums array contains 100 items\", () => {\r",
									"    const albums = pm.response.json();\r",
									"    pm.expect(albums.length).to.equal(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get albums by user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"albumsSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Albums are returned only for the requested user ID\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const albums = pm.response.json();",
									"    ",
									"    albums.forEach(album => {",
									"        pm.expect(album.userId).to.equal(userId);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums/?userId={{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific album by Album ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"albumSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID corresponds to album ID\", () => {",
									"    const albumId = pm.collectionVariables.get(\"albumId\");",
									"    const responseId = pm.response.json().id;",
									"    pm.expect(responseId).to.equal(albumId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums/{{albumId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums",
								"{{albumId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"photosSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Photos array contains 5000 items\", () => {\r",
									"    const photos = pm.response.json();\r",
									"    pm.expect(photos.length).to.equal(5000);\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific photo by Photo ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"photoSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID corresponds to photo ID\", () => {",
									"    const photoId = pm.collectionVariables.get(\"photoId\");",
									"    const responseId = pm.response.json().id;",
									"    pm.expect(responseId).to.equal(photoId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/{{photoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								"{{photoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific photos by Album ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"photosSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"ID matches requested album IDs\", () => {",
									"    const albumId = pm.collectionVariables.get(\"albumId\");",
									"    const photos = pm.response.json();",
									"",
									"    photos.forEach(photo => {",
									"        pm.expect(photo.albumId).to.be.equal(albumId);",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/?albumId={{albumId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								""
							],
							"query": [
								{
									"key": "albumId",
									"value": "{{albumId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"commentsSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Comments array contains 500 items\", () => {\r",
									"    const comments = pm.response.json();\r",
									"    pm.expect(comments.length).to.be.equal(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific comment by comment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"commentSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID matches comment ID from response\", () => {",
									"    const commentId = pm.collectionVariables.get(\"commentId\");",
									"    const comment = pm.response.json();",
									"    pm.expect(comment.id).to.be.equal(commentId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/{{commentId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific comments by post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"commentsSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID matches post IDs in response\", () => {",
									"    const postId = pm.collectionVariables.get(\"postId\");",
									"    const comments = pm.response.json();",
									"",
									"    comments.forEach(comment => {",
									"        pm.expect(comment.postId).to.be.equal(postId);",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/?postId={{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								""
							],
							"query": [
								{
									"key": "postId",
									"value": "{{postId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"postsSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Posts array contains 100 items\", () => {\r",
									"    const posts = pm.response.json();\r",
									"    pm.expect(posts.length).to.be.equal(100);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts by specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"postsSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID matches user IDs in response\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const posts = pm.response.json();",
									"",
									"    posts.forEach(post => {",
									"        pm.expect(post.userId).to.be.equal(userId);",
									"    })",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/?userId={{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific post by post ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {",
									"    const schema = pm.collectionVariables.get(\"postSchema\");",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID matches post ID from response\", () => {",
									"    const postId = pm.collectionVariables.get(\"postId\");",
									"    const post = pm.response.json();",
									"    pm.expect(post.id).to.be.equal(postId);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All comments for specific post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"commentsSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Requested ID matches post IDs in response\", () => {\r",
									"    const postId = pm.collectionVariables.get(\"postId\");\r",
									"    const comments = pm.response.json();\r",
									"\r",
									"    comments.forEach(comment => {\r",
									"        pm.expect(comment.postId).to.be.equal(postId);\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postId}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}",
								"comments"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    const schema = pm.collectionVariables.get(\"postSchema\");\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"User ID matches specified user ID\", () => {\r",
									"    const userId = pm.collectionVariables.get(\"userId\");\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.userId).to.be.equal(userId);\r",
									"});\r",
									"\r",
									"pm.test(\"Post title matches specified title\", () => {\r",
									"    const postTitle = pm.collectionVariables.get(\"postTitle\");\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.title).to.be.equal(postTitle);\r",
									"});\r",
									"\r",
									"pm.test(\"Post body matches specified body\", () => {\r",
									"    const postBody = pm.collectionVariables.get(\"postBody\");\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.body).to.be.equal(postBody);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"title\": \"{{postTitle}}\",\n    \"body\": \"{{postBody}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Update Post",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": {{userId}},\n  \"title\": \"{{postTitle}}\",\n  \"body\": \"{{postBody}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "PATCH",
			"item": [
				{
					"name": "Patch post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{postTitle}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "Delete a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is empty object\", () => {",
									"    pm.expect(pm.response.json()).to.deep.equal({});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "GET",
					"item": [
						{
							"name": "Get specific user",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{nonExistingUserId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{nonExistingUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{invalidFormatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/0",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{negativeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{userId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{userId}}; DROP TABLE users;"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Specific todos by user",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "userId",
												"value": "5",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{nonExistingUserId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{nonExistingUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{invalidFormatId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId=0",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{negativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId=999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "999999999999999999999999999999999999999999999999999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{userId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{userId}}; DROP TABLE users;"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Specific todos by todos ID",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{nonExistingTodoId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{nonExistingTodoId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{invalidFormatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/0",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{negativeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/999999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"999999999999999999999999999999999999999999999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{todoId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{todoId}}; DROP TABLE users;"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "POST",
					"item": [
						{
							"name": "Empty body",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without title and user ID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"body\": \"{{postBody}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid user ID format",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userId\": {{invalidFormatId}},\r\n    \"title\": \"{{postTitle}}\",\r\n    \"body\": \"{{postBody}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Long strings and UNICODE special characters",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"title\": \"🧪\".repeat(1000),\r\n  \"body\": \"🚨\".repeat(5000)\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Empty strings and spaces",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"title\": \"   \",\r\n  \"body\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unexpected data types",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"{{invalidFormatId}}\",\r\n  \"title\": {{userId}},\r\n  \"body\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Number randomizer function\r",
					"function getRandomInt(min, max) {\r",
					"    min = Math.ceil(min);\r",
					"    max = Math.floor(max);\r",
					"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
					"}\r",
					"\r",
					"// String randomizer function\r",
					"function getRandomString(length) {\r",
					"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$^&*()_+-=[]{}|;:,.<>?';\r",
					"    return Array.from({length}, () => chars[Math.floor(Math.random() * chars.length)]).join('');\r",
					"}\r",
					"\r",
					"\r",
					"// General IDs\r",
					"const invalidFormatId = getRandomString(8);\r",
					"pm.collectionVariables.set(\"invalidFormatId\", invalidFormatId);\r",
					"\r",
					"const negativeId = getRandomInt(-999, -1);\r",
					"pm.collectionVariables.set(\"negativeId\", negativeId);\r",
					"\r",
					"\r",
					"// User IDs\r",
					"const userId = getRandomInt(1, 10); // Get random user id from 1 to 10\r",
					"pm.collectionVariables.set(\"userId\", userId);\r",
					"\r",
					"const nonExistingUserId = getRandomInt(11, 100);\r",
					"pm.collectionVariables.set(\"nonExistingUserId\", nonExistingUserId);\r",
					"\r",
					"\r",
					"// TODO IDs\r",
					"const todoId = getRandomInt(1, 200);\r",
					"pm.collectionVariables.set(\"todoId\", todoId);\r",
					"\r",
					"const nonExistingTodoId = getRandomInt(201, 1000);\r",
					"pm.collectionVariables.set(\"nonExistingTodoId\", nonExistingTodoId);\r",
					"\r",
					"\r",
					"// Album IDs\r",
					"const albumId = getRandomInt(1, 100);\r",
					"pm.collectionVariables.set(\"albumId\", albumId);\r",
					"\r",
					"\r",
					"// Photo ID\r",
					"const photoId = getRandomInt(1, 5000);\r",
					"pm.collectionVariables.set(\"photoId\", photoId);\r",
					"\r",
					"\r",
					"// Comment ID\r",
					"const commentId = getRandomInt(1, 500);\r",
					"pm.collectionVariables.set(\"commentId\", commentId);\r",
					"\r",
					"\r",
					"// Post ID\r",
					"const postId = getRandomInt(1, 100);\r",
					"pm.collectionVariables.set(\"postId\", postId);\r",
					"\r",
					"const postTitle = getRandomString(24);\r",
					"pm.collectionVariables.set(\"postTitle\", postTitle);\r",
					"\r",
					"const postBody = getRandomString(128);\r",
					"pm.collectionVariables.set(\"postBody\", postBody);\r",
					"\r",
					"\r",
					"// SCHEMAS\r",
					"\r",
					"// Users array schema\r",
					"\r",
					"const usersSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"id\", \"name\", \"username\", \"email\", \"address\", \"phone\", \"website\", \"company\"],\r",
					"        properties: {\r",
					"            id: { type: \"number\" },\r",
					"            name: { type: \"string\" },\r",
					"            username: { type: \"string\" },\r",
					"            email: { type: \"string\" },\r",
					"            address: {\r",
					"                type: \"object\",\r",
					"                required: [\"street\", \"suite\", \"city\", \"zipcode\", \"geo\"],\r",
					"                properties: {\r",
					"                    street: { type: \"string\" },\r",
					"                    suite: { type: \"string\" },\r",
					"                    city: { type: \"string\" },\r",
					"                    zipcode: { type: \"string\" },\r",
					"                    geo: {\r",
					"                        type: \"object\",\r",
					"                        required: [\"lat\", \"lng\"],\r",
					"                        properties: {\r",
					"                            lat: { type: \"string\" },\r",
					"                            lng: { type: \"string\" }\r",
					"                        }\r",
					"                    }\r",
					"                }\r",
					"            },\r",
					"            phone: { type: \"string\" },\r",
					"            website: { type: \"string\" },\r",
					"            company: {\r",
					"                type: \"object\",\r",
					"                required: [\"name\", \"catchPhrase\", \"bs\"],\r",
					"                properties: {\r",
					"                    name: { type: \"string\" },\r",
					"                    catchPhrase: { type: \"string\" },\r",
					"                    bs: { type: \"string\" }\r",
					"                }\r",
					"            }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"usersSchema\", usersSchema);\r",
					"\r",
					"\r",
					"// User schema\r",
					"\r",
					"const userSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"id\", \"name\", \"username\", \"email\", \"address\", \"phone\", \"website\", \"company\"],\r",
					"    properties: {\r",
					"        id: { type: \"number\" },\r",
					"        name: { type: \"string\" },\r",
					"        username: { type: \"string\" },\r",
					"        email: { type: \"string\" },\r",
					"        address: {\r",
					"            type: \"object\",\r",
					"            required: [\"street\", \"suite\", \"city\", \"zipcode\", \"geo\"],\r",
					"            properties: {\r",
					"                street: { type: \"string\" },\r",
					"                suite: { type: \"string\" },\r",
					"                city: { type: \"string\" },\r",
					"                zipcode: { type: \"string\" },\r",
					"                geo: {\r",
					"                    type: \"object\",\r",
					"                    required: [\"lat\", \"lng\"],\r",
					"                    properties: {\r",
					"                        lat: { type: \"string\" },\r",
					"                        lng: { type: \"string\" }\r",
					"                    }\r",
					"                }\r",
					"            }\r",
					"        },\r",
					"        phone: { type: \"string\" },\r",
					"        website: { type: \"string\" },\r",
					"        company: {\r",
					"            type: \"object\",\r",
					"            required: [\"name\", \"catchPhrase\", \"bs\"],\r",
					"            properties: {\r",
					"                name: { type: \"string\" },\r",
					"                catchPhrase: { type: \"string\" },\r",
					"                bs: { type: \"string\" }\r",
					"            }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"userSchema\", userSchema);\r",
					"\r",
					"\r",
					"// TODOs array schema\r",
					"\r",
					"const todosSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"userId\", \"id\", \"title\", \"completed\"],\r",
					"        properties: {\r",
					"            userId: { type: \"integer\" },\r",
					"            id: { type: \"integer\" },\r",
					"            title: { type: \"string\" },\r",
					"            completed: { type: \"boolean\" }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"todosSchema\", todosSchema);\r",
					"\r",
					"\r",
					"// TODO Schema\r",
					"\r",
					"const todoSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"userId\", \"id\", \"title\", \"completed\"],\r",
					"    properties: {\r",
					"        userId: { type: \"number\" },\r",
					"        id: { type: \"number\" },\r",
					"        title: { type: \"string\" },\r",
					"        completed: { type: \"boolean\" }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"todoSchema\", todoSchema);\r",
					"\r",
					"\r",
					"// Albums array schema\r",
					"\r",
					"const albumsSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"userId\", \"id\", \"title\"],\r",
					"        properties: {\r",
					"            userId: { type: \"number\" },\r",
					"            id: { type: \"number\" },\r",
					"            title: { type: \"string\" }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"albumsSchema\", albumsSchema);\r",
					"\r",
					"\r",
					"// Album schema\r",
					"\r",
					"const albumSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"userId\", \"id\", \"title\"],\r",
					"    properties: {\r",
					"        userId: { type: \"number\" },\r",
					"        id: { type: \"number\" },\r",
					"        title: { type: \"string\" }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"albumSchema\", albumSchema);\r",
					"\r",
					"\r",
					"// Photos array schema\r",
					"\r",
					"const photosSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"],\r",
					"        properties: {\r",
					"            albumId: { type: \"number\" },\r",
					"            id: { type: \"number\" },\r",
					"            title: { type: \"string\" },\r",
					"            url: { type: \"string\" },\r",
					"            thumbnailUrl: { type: \"string\" }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"photosSchema\", photosSchema);\r",
					"\r",
					"\r",
					"// Photo schema\r",
					"\r",
					"const photoSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"albumId\", \"id\", \"title\", \"url\", \"thumbnailUrl\"],\r",
					"    properties: {\r",
					"        albumId: { type: \"number\" },\r",
					"        id: { type: \"number\" },\r",
					"        title: { type: \"string\" },\r",
					"        url: { type: \"string\" },\r",
					"        thumbnailUrl: { type: \"string\" }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"photoSchema\", photoSchema);\r",
					"\r",
					"\r",
					"// Comments array schema\r",
					"\r",
					"const commentsSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"postId\", \"id\", \"name\", \"email\", \"body\"],\r",
					"        properties: {\r",
					"            postId: { type: \"number\" },\r",
					"            id: { type: \"number\" },\r",
					"            name: { type: \"string\" },\r",
					"            email: { type: \"string\" },\r",
					"            body: { type: \"string\" }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"commentsSchema\", commentsSchema);\r",
					"\r",
					"\r",
					"// Comment schema\r",
					"\r",
					"const commentSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"postId\", \"id\", \"name\", \"email\", \"body\"],\r",
					"    properties: {\r",
					"        postId: { type: \"number\" },\r",
					"        id: { type: \"number\" },\r",
					"        name: { type: \"string\" },\r",
					"        email: { type: \"string\" },\r",
					"        body: { type: \"string\" }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"commentSchema\", commentSchema)\r",
					"\r",
					"\r",
					"// Posts array schema\r",
					"\r",
					"const postsSchema = {\r",
					"    type: \"array\",\r",
					"    items: {\r",
					"        type: \"object\",\r",
					"        required: [\"userId\", \"id\", \"title\", \"body\"],\r",
					"        properties: {\r",
					"            userId: { type: \"number\" },\r",
					"            id: { type: \"number\" },\r",
					"            title: { type: \"string\" },\r",
					"            body: { type: \"string\" }\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"postsSchema\", postsSchema);\r",
					"\r",
					"\r",
					"// Post schema\r",
					"\r",
					"const postSchema = {\r",
					"    type: \"object\",\r",
					"    required: [\"userId\", \"id\", \"title\", \"body\"],\r",
					"    properties: {\r",
					"        userId: { type: \"number\" },\r",
					"        id: { type: \"number\" },\r",
					"        title: { type: \"string\" },\r",
					"        body: { type: \"string\" }\r",
					"    }\r",
					"};\r",
					"\r",
					"pm.collectionVariables.set(\"postSchema\", postSchema);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Check JSON format and correct parsing\r",
					"pm.test(\"Response is valid JSON\", () => {\r",
					"    pm.response.to.be.withBody;\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"\r",
					"    try {\r",
					"        pm.response.json();\r",
					"    } catch (e) {\r",
					"        pm.expect.fail(\"Response is not valid JSON\");\r",
					"    }\r",
					"});\r",
					"\r",
					"// Check the response time\r",
					"pm.test(\"Response time is under 500ms\", () => {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "nonExistingUserId",
			"value": "11"
		},
		{
			"key": "todoId",
			"value": "1"
		},
		{
			"key": "nonExistingTodoId",
			"value": "201"
		},
		{
			"key": "invalidFormatId",
			"value": "abc"
		},
		{
			"key": "negativeId",
			"value": "-1"
		},
		{
			"key": "albumId",
			"value": "1"
		},
		{
			"key": "photoId",
			"value": "1"
		},
		{
			"key": "commentId",
			"value": "1"
		},
		{
			"key": "postId",
			"value": "1"
		},
		{
			"key": "postTitle",
			"value": ""
		},
		{
			"key": "postBody",
			"value": ""
		},
		{
			"key": "usersSchema",
			"value": ""
		},
		{
			"key": "userSchema",
			"value": ""
		},
		{
			"key": "todosSchema",
			"value": ""
		},
		{
			"key": "todoSchema",
			"value": ""
		},
		{
			"key": "albumsSchema",
			"value": ""
		},
		{
			"key": "albumSchema",
			"value": ""
		},
		{
			"key": "photosSchema",
			"value": ""
		},
		{
			"key": "photoSchema",
			"value": ""
		},
		{
			"key": "commentsSchema",
			"value": ""
		},
		{
			"key": "commentSchema",
			"value": ""
		},
		{
			"key": "postsSchema",
			"value": ""
		},
		{
			"key": "postSchema",
			"value": ""
		}
	]
}