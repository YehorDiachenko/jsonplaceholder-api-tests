{
	"info": {
		"_postman_id": "a0322937-0345-4d82-926a-8c1ca03065b1",
		"name": "Testing_Collection",
		"description": "Work is organized in workspace: JSONPlaceholder, one collection: Testing_Collection, 5 folders for five different kind of requests: GET, POST, PUT, PATCH and DELETE. One environment is part of this collection: Placeholder_Environment. All variables all separated in collection, environment and global variables. Dynamic variables, random numbers, generated from function defined in Pre-request Script in Testing_Collection. Two tests are same for all tests in all request: status code and response time. All other tests are specifically made for specific cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6562042",
		"_collection_link": "https://postman-5122.postman.co/workspace/JSONPlaceholder~bf394633-a9a0-44f8-9951-34def3dfa6df/collection/6562042-a0322937-0345-4d82-926a-8c1ca03065b1?action=share&source=collection_link&creator=6562042"
	},
	"item": [
		{
			"name": "GET",
			"item": [
				{
					"name": "Negative Tests",
					"item": [
						{
							"name": "Get specific user",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{nonExistingUserId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{nonExistingUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{invalidFormatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/0",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{negativeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/users/{{userId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"users",
												"{{userId}}; DROP TABLE users;"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Specific todos by user",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "userId",
												"value": "5",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{nonExistingUserId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{nonExistingUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{invalidFormatId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId=0",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{negativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId=999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "999999999999999999999999999999999999999999999999999"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/?userId={{userId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												""
											],
											"query": [
												{
													"key": "userId",
													"value": "{{userId}}; DROP TABLE users;"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Specific todos by todos ID",
							"item": [
								{
									"name": "Non-existing ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{nonExistingTodoId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{nonExistingTodoId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ID format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{invalidFormatId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{invalidFormatId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ID is zero",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/0",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Negative ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{negativeId}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{negativeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Out of scope ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/999999999999999999999999999999999999999999999999999999",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"999999999999999999999999999999999999999999999999999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "SQL Injection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "javascript"
												}
											}
										},
										"url": {
											"raw": "{{url}}/todos/{{todoId}}; DROP TABLE users;",
											"host": [
												"{{url}}"
											],
											"path": [
												"todos",
												"{{todoId}}; DROP TABLE users;"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.variables.set(\"skipStatus200\", true);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Get list of all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        required: [\"id\", \"name\", \"username\", \"email\", \"address\", \"phone\", \"website\", \"company\"],\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            username: { type: \"string\" },\r",
									"            email: { type: \"string\" },\r",
									"            address: {\r",
									"                type: \"object\",\r",
									"                required: [\"street\", \"suite\", \"city\", \"zipcode\", \"geo\"],\r",
									"                properties: {\r",
									"                    street: { type: \"string\" },\r",
									"                    suite: { type: \"string\" },\r",
									"                    city: { type: \"string\" },\r",
									"                    zipcode: { type: \"string\" },\r",
									"                    geo: {\r",
									"                        type: \"object\",\r",
									"                        required: [\"lat\", \"lng\"],\r",
									"                        properties: {\r",
									"                            lat: { type: \"string\" },\r",
									"                            lng: { type: \"string\" }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            },\r",
									"            phone: { type: \"string\" },\r",
									"            website: { type: \"string\" },\r",
									"            company: {\r",
									"                type: \"object\",\r",
									"                required: [\"name\", \"catchPhrase\", \"bs\"],\r",
									"                properties: {\r",
									"                    name: { type: \"string\" },\r",
									"                    catchPhrase: { type: \"string\" },\r",
									"                    bs: { type: \"string\" }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Array has 10 users\", () => {\r",
									"    const users = pm.response.json();\r",
									"    pm.expect(users.length).to.equal(10);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    type: \"object\",",
									"    required: [\"id\", \"name\", \"username\", \"email\", \"address\", \"phone\", \"website\", \"company\"],",
									"    properties: {",
									"        id: { type: \"number\" },",
									"        name: { type: \"string\" },",
									"        username: { type: \"string\" },",
									"        email: { type: \"string\" },",
									"        address: {",
									"            type: \"object\",",
									"            required: [\"street\", \"suite\", \"city\", \"zipcode\", \"geo\"],",
									"            properties: {",
									"                street: { type: \"string\" },",
									"                suite: { type: \"string\" },",
									"                city: { type: \"string\" },",
									"                zipcode: { type: \"string\" },",
									"                geo: {",
									"                    type: \"object\",",
									"                    required: [\"lat\", \"lng\"],",
									"                    properties: {",
									"                        lat: { type: \"string\" },",
									"                        lng: { type: \"string\" }",
									"                    }",
									"                }",
									"            }",
									"        },",
									"        phone: { type: \"string\" },",
									"        website: { type: \"string\" },",
									"        company: {",
									"            type: \"object\",",
									"            required: [\"name\", \"catchPhrase\", \"bs\"],",
									"            properties: {",
									"                name: { type: \"string\" },",
									"                catchPhrase: { type: \"string\" },",
									"                bs: { type: \"string\" }",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"Response matches JSON schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Requested ID corresponds to user ID\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const responseId = pm.response.json().id;",
									"    pm.expect(responseId).to.equal(userId);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/{{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        required: [\"userId\", \"id\", \"title\", \"completed\"],\r",
									"        properties: {\r",
									"            userId: { type: \"integer\" },\r",
									"            id: { type: \"integer\" },\r",
									"            title: { type: \"string\" },\r",
									"            completed: { type: \"boolean\" }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.test(\"Response matches JSON schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has 200 items\", () => {\r",
									"    pm.expect(pm.response.json().length).to.eql(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/todos",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific todos by user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {",
									"    type: \"array\",",
									"    items: {",
									"        type: \"object\",",
									"        required: [\"userId\", \"id\", \"title\", \"completed\"],",
									"        properties: {",
									"            userId: { type: \"integer\" },",
									"            id: { type: \"integer\" },",
									"            title: { type: \"string\" },",
									"            completed: { type: \"boolean\" }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"Response matches JSON schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Todos are returned only for the requested user ID\", () => {",
									"    const userId = pm.collectionVariables.get(\"userId\");",
									"    const todos = pm.response.json();",
									"    ",
									"    todos.forEach(todo => {",
									"        pm.expect(todo.userId).to.equal(userId);",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "userId",
								"value": "5",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{url}}/todos/?userId={{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific todos by todos ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"const schema = {",
									"    type: \"object\",",
									"    required: [\"userId\", \"id\", \"title\", \"completed\"],",
									"    properties: {",
									"        userId: { type: \"number\" },",
									"        id: { type: \"number\" },",
									"        title: { type: \"string\" },",
									"        completed: { type: \"boolean\" }",
									"    }",
									"};",
									"",
									"pm.test(\"Response matches JSON schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"TODO ID corresponds to the requested TODO ID\", () => {",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"todoId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{url}}/todos/{{todoId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get album list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific album by user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Album showed only for specific user ID\", function () {",
									"    var number=pm.environment.get('number10');",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(jsonData[0].userId).to.eql(number);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums/?userId={{number10}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{number10}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific album by Album ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Album ID in response correspond to called album id\", function(){",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.collectionVariables.get(\"albumID\")));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/albums/{{albumID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"albums",
								"{{albumID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of photos",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific photo by Photo ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Photo ID in response correspond to called photo id\", function(){",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"photoID\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/{{photoID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								"{{photoID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific photos by Album ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Photos showed only for specific Album ID\", function () {",
									"    var number=pm.environment.get('number100');",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(jsonData[0].albumId).to.eql(number);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/photos/?albumId={{number100}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"photos",
								""
							],
							"query": [
								{
									"key": "albumId",
									"value": "{{number100}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of comments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific comment by comment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Comment ID in response correspond to called comment id\", function(){",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"commentID\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/{{commentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								"{{commentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save email and post ID from comment request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//saved email as global variable from random comment ",
									"const jsonData = pm.response.json();",
									"pm.globals.set(\"savedEmail\", jsonData.email)",
									"",
									"//saved postId as global variable",
									"pm.globals.set(\"savedPostId\", jsonData.postId)",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/{{commentID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								"{{commentID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific comments by post ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Comments reutrned only for appropriate postID\", function () {",
									"    var number=pm.environment.get('number100');",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(jsonData[0].postId).to.eql(number);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/comments/?postId={{number100}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"comments",
								""
							],
							"query": [
								{
									"key": "postId",
									"value": "{{number100}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Posts by specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Posts returned only for appropriate user ID\", function () {",
									"    var number=pm.environment.get('number10');",
									"    var jsonData = JSON.parse(responseBody);",
									"    pm.expect(jsonData[0].userId).to.eql(number);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/?userId={{number10}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{number10}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Specific post by post ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Post ID in response correspond to called post's id\", function(){",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"postID\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "All comments for specific post",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{number100}}/comments",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{number100}}",
								"comments"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"if (!pm.variables.get(\"skipStatus200\")) {\r",
							"    pm.test(\"Status code is 200\", () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "POST",
			"item": [
				{
					"name": "Post request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"userId\": 8,\n    \"id\": 55,\n    \"title\": \"Post created by Nikola\",\n    \"body\": \"This is first post request on fake api server jsonplaceholder\"\n  },\n  {\n    \"userId\": 4,\n    \"id\": 44,\n    \"title\": \"Post created by Marko\",\n    \"body\": \"This is first post request on fake api server jsonplaceholder\"\n  }]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": [
						{
							"name": "Post request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\n    \"userId\": 8,\n    \"id\": 55,\n    \"title\": \"Post created by Nikola\",\n    \"body\": \"This is first post request on fake api server jsonplaceholder\"\n  },\n  {\n    \"userId\": 4,\n    \"id\": 44,\n    \"title\": \"Post created by Marko\",\n    \"body\": \"This is first post request on fake api server jsonplaceholder\"\n  }]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 27 Mar 2022 14:51:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "334"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Ratelimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-Ratelimit-Remaining",
									"value": "999"
								},
								{
									"key": "X-Ratelimit-Reset",
									"value": "1648392722"
								},
								{
									"key": "Vary",
									"value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "Location"
								},
								{
									"key": "Location",
									"value": "http://jsonplaceholder.typicode.com/posts/101"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Etag",
									"value": "W/\"14e-1qSAuyIMsVUszVSsA4/GWV2M3bA\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Expect-CT",
									"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=9%2B4FVspmc%2BOlGv1kgTaQrT5QnlsBovFCTrRptzkntuUdeHQTIZ5ysM652tgju0O6i2yahyr7ELQI8BhSI5PWkaPonsNBBxmwAG7uUY%2BeOa%2Bkmft2O%2BAB8XdC5k2isHRFwS%2Fe5gtaNZQoLhn3ymgS\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "6f28f143da440faa-VIE"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"0\": {\n        \"userId\": 8,\n        \"id\": 55,\n        \"title\": \"Post created by Nikola\",\n        \"body\": \"This is first post request on fake api server jsonplaceholder\"\n    },\n    \"1\": {\n        \"userId\": 4,\n        \"id\": 44,\n        \"title\": \"Post created by Marko\",\n        \"body\": \"This is first post request on fake api server jsonplaceholder\"\n    },\n    \"id\": 101\n}"
						}
					]
				},
				{
					"name": "Post request with saved value",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"id\": {{postID}},\n    \"title\": \"Post created by Nikola\",\n    \"body\": \"This is first post request on fake api server jsonplaceholder\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"item": [
				{
					"name": "Put request",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": 8,\n  \"title\": \"JSON placeholder put request\",\n  \"body\": \"Put request used\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": [
						{
							"name": "Put request",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": 8,\n  \"title\": \"JSON placeholder put request\",\n  \"body\": \"Put request used\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/posts/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"posts",
										"1"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 27 Mar 2022 17:23:03 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "X-Ratelimit-Limit",
									"value": "1000"
								},
								{
									"key": "X-Ratelimit-Remaining",
									"value": "999"
								},
								{
									"key": "X-Ratelimit-Reset",
									"value": "1648401842"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Etag",
									"value": "W/\"65-AdI5wLfR+D27e3BL0UuwCN4t250\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Expect-CT",
									"value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
								},
								{
									"key": "Report-To",
									"value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=tszAVzFVANA275Y2wc1U9tJBWWqTdyQqUGzUUbTRNMV66LrA%2B%2FDR4ZVwxWfcXd1EFE5%2BT71Sbfowxu1dePyLH0Lx6paAljX%2BWSGD%2BcWSbtJ8jR%2FAszDqNgDGcJsONJZcmutsVt9S8Q45abCrZI9k\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "NEL",
									"value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "6f29cfc9bb4a7891-VIE"
								},
								{
									"key": "Content-Encoding",
									"value": "br"
								},
								{
									"key": "alt-svc",
									"value": "h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400"
								}
							],
							"cookie": [],
							"body": "{\n    \"userId\": 8,\n    \"title\": \"JSON placeholder put request\",\n    \"body\": \"Put request used\",\n    \"id\": 1\n}"
						}
					]
				}
			]
		},
		{
			"name": "PATCH",
			"item": [
				{
					"name": "Patch request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    var jsonData = JSON.parse(responseBody);",
									"  pm.expect(jsonData.title.message_content).to.eql(pm.environment.get(\"savedTitle\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{savedTitle}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/posts/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get post title and use for patch request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"pm.globals.set(\"savedTitle\", jsonData.title)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/{{postID}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"{{postID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is empty\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/posts/1",
							"host": [
								"{{url}}"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Number randomizer function\r",
					"function getRandomInt(min, max) {\r",
					"    min = Math.ceil(min);\r",
					"    max = Math.floor(max);\r",
					"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
					"}\r",
					"\r",
					"// String randomizer function\r",
					"function getRandomString(length) {\r",
					"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$^&*()_+-=[]{}|;:,.<>?';\r",
					"    return Array.from({length}, () => chars[Math.floor(Math.random() * chars.length)]).join('');\r",
					"}\r",
					"\r",
					"\r",
					"// General IDs\r",
					"const invalidFormatId = getRandomString(8);\r",
					"pm.collectionVariables.set(\"invalidFormatId\", invalidFormatId);\r",
					"\r",
					"const negativeId = getRandomInt(-999, -1);\r",
					"pm.collectionVariables.set(\"negativeId\", negativeId);\r",
					"\r",
					"\r",
					"// User IDs\r",
					"const userId = getRandomInt(1, 10); // Get random user id from 1 to 10\r",
					"pm.collectionVariables.set(\"userId\", userId);\r",
					"\r",
					"const nonExistingUserId = getRandomInt(11, 100);\r",
					"pm.collectionVariables.set(\"nonExistingUserId\", nonExistingUserId);\r",
					"\r",
					"\r",
					"// TODO IDs\r",
					"const todoId = getRandomInt(1, 200);\r",
					"pm.collectionVariables.set(\"todoId\", todoId);\r",
					"\r",
					"const nonExistingTodoId = getRandomInt(201, 1000);\r",
					"pm.collectionVariables.set(\"nonExistingTodoId\", nonExistingTodoId);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Check JSON format and correct parsing\r",
					"pm.test(\"Response is valid JSON\", () => {\r",
					"    pm.response.to.be.withBody;\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
					"\r",
					"    try {\r",
					"        pm.response.json();\r",
					"    } catch (e) {\r",
					"        pm.expect.fail(\"Response is not valid JSON\");\r",
					"    }\r",
					"});\r",
					"\r",
					"// Check the response time\r",
					"pm.test(\"Response time is under 500ms\", () => {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1"
		},
		{
			"key": "nonExistingUserId",
			"value": "11"
		},
		{
			"key": "todoId",
			"value": "1"
		},
		{
			"key": "nonExistingTodoId",
			"value": "201"
		},
		{
			"key": "invalidFormatId",
			"value": "abc"
		},
		{
			"key": "negativeId",
			"value": "-1"
		}
	]
}